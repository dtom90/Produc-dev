{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/esm/directives/toggle/toggle.js","webpack:///./node_modules/bootstrap-vue/esm/directives/modal/modal.js","webpack:///./node_modules/bootstrap-vue/esm/directives/toggle/index.js","webpack:///./node_modules/bootstrap-vue/esm/icons/helpers/icon-base.js","webpack:///./node_modules/bootstrap-vue/esm/icons/helpers/make-icon.js"],"names":["CLASS_BV_TOGGLE_COLLAPSED","CLASS_BV_TOGGLE_NOT_COLLAPSED","BV_BASE","BV_TOGGLE_ROOT_HANDLER","concat","BV_TOGGLE_CLICK_HANDLER","BV_TOGGLE_STATE","BV_TOGGLE_TARGETS","STRING_FALSE","STRING_TRUE","ATTR_ARIA_CONTROLS","ATTR_ARIA_EXPANDED","ATTR_ROLE","ATTR_TABINDEX","STYLE_OVERFLOW_ANCHOR","ROOT_ACTION_EVENT_NAME_TOGGLE","ROOT_EVENT_NAME_STATE","ROOT_EVENT_NAME_SYNC_STATE","ROOT_ACTION_EVENT_NAME_REQUEST_STATE","KEYDOWN_KEY_CODES","isNonStandardTag","el","tagName","toLowerCase","getTargets","_ref","modifiers","arg","value","targets","split","href","test","push","replace","forEach","t","filter","index","arr","indexOf","removeClickListener","handler","addClickListener","instance","event","type","keyCode","target","$emit","removeRootListeners","$off","addRootListeners","id","state","setToggleState","$on","resetProp","prop","handleUpdate","binding","vnode","length","join","VBToggle","bind","componentUpdated","updated","unbind","ROOT_ACTION_EVENT_NAME_SHOW","PROPERTY","getTarget","_ref$modifiers","reverse","getTriggerElement","setRole","trigger","currentTarget","key","oldProp","VBModal","inserted","VBTogglePlugin","directives","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","BASE_ATTRS","viewBox","width","height","focusable","role","STACKED_ATTRS","animation","content","flipH","flipV","fontScale","rotate","scale","shiftH","shiftV","stacked","title","variant","BVIconBase","name","functional","props","render","h","_class","data","children","math","hasScale","hasTransforms","hasShift","hasContent","transforms","identity","$inner","attrs","transform","domProps","innerHTML","$title","$content","staticClass","class","style","fontSize","xmlns","fill","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread","i","arguments","source","getOwnPropertyDescriptors","defineProperties","iconProps","kebabName","iconName","iconNameClass","iconTitle","svgContent"],"mappings":"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","file":"js/chunk-vendors~f8ef863f.ea947ff2.js","sourcesContent":["import { NAME_COLLAPSE } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { getInstanceFromDirective } from '../../utils/get-instance-from-directive';\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { keys } from '../../utils/object';\nimport { getEventRoot } from '../../utils/get-event-root'; // --- Constants ---\n// Classes to apply to trigger element\n\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\n\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\n\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\n\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\n\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\n\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\n\nvar STRING_FALSE = 'false';\nvar STRING_TRUE = 'true'; // Commonly used attribute names\n\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\nvar ATTR_ROLE = 'role';\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\n\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\n\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\n\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\n// Gets emitted even if the state of b-collapse has not changed\n// This event is NOT to be documented as people should not be using it\n\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\n\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\n\nvar isNonStandardTag = function isNonStandardTag(el) {\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\n};\n\nvar getTargets = function getTargets(_ref, el) {\n  var modifiers = _ref.modifiers,\n      arg = _ref.arg,\n      value = _ref.value;\n  // Any modifiers are considered target IDs\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\n\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\n\n  if (isTag(el.tagName, 'a')) {\n    var href = getAttr(el, 'href') || '';\n\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''));\n    }\n  } // Add ID from `arg` (if provided), and support value\n  // as a single string ID or an array of string IDs\n  // If `value` is not an array or string, then it gets filtered out\n\n\n  concat(arg, value).forEach(function (t) {\n    return isString(t) && targets.push(t);\n  }); // Return only unique and truthy target IDs\n\n  return targets.filter(function (t, index, arr) {\n    return t && arr.indexOf(t) === index;\n  });\n};\n\nvar removeClickListener = function removeClickListener(el) {\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\n\n  if (handler) {\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\n};\n\nvar addClickListener = function addClickListener(el, instance) {\n  removeClickListener(el);\n\n  if (instance) {\n    var handler = function handler(event) {\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n        targets.forEach(function (target) {\n          getEventRoot(instance).$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\n        });\n      }\n    };\n\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (isNonStandardTag(el)) {\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar removeRootListeners = function removeRootListeners(el, instance) {\n  if (el[BV_TOGGLE_ROOT_HANDLER] && instance) {\n    getEventRoot(instance).$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\n  }\n\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\n};\n\nvar addRootListeners = function addRootListeners(el, instance) {\n  removeRootListeners(el, instance);\n\n  if (instance) {\n    var handler = function handler(id, state) {\n      // `state` will be `true` if target is expanded\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\n        // Set/Clear 'collapsed' visibility class state\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\n\n        setToggleState(el, state);\n      }\n    };\n\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\n\n    getEventRoot(instance).$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\n  }\n};\n\nvar setToggleState = function setToggleState(el, state) {\n  // State refers to the visibility of the collapse/sidebar\n  if (state) {\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\n  } else {\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\n  }\n}; // Reset and remove a property from the provided element\n\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  /* istanbul ignore next: should never happen */\n  if (!IS_BROWSER || !getInstanceFromDirective(vnode, binding)) {\n    return;\n  } // If element is not a button or link, we add `role=\"button\"`\n  // and `tabindex=\"0\"` for accessibility reasons\n\n\n  if (isNonStandardTag(el)) {\n    if (!hasAttr(el, ATTR_ROLE)) {\n      setAttr(el, ATTR_ROLE, 'button');\n    }\n\n    if (!hasAttr(el, ATTR_TABINDEX)) {\n      setAttr(el, ATTR_TABINDEX, '0');\n    }\n  } // Ensure the collapse class and `aria-*` attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or its contents)\n\n\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\n\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\n  // or removed when vnode updates\n  // Also ensure to set `overflow-anchor` to `none` to prevent\n  // the browser's scroll anchoring behavior\n\n  /* istanbul ignore else */\n\n  if (targets.length > 0) {\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\n  } else {\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  } // Add/Update our click listener(s)\n  // Wrap in a `requestAF()` to allow any previous\n  // click handling to occur first\n\n\n  requestAF(function () {\n    addClickListener(el, getInstanceFromDirective(vnode, binding));\n  }); // If targets array has changed, update\n\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\n    // Update targets array to element storage\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\n    // Request a state update from targets so that we can\n    // ensure expanded state is correct (in most cases)\n\n    targets.forEach(function (target) {\n      getEventRoot(getInstanceFromDirective(vnode, binding)).$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\n    });\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    // State is initially collapsed until we receive a state event\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\n\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\n\n    addRootListeners(el, getInstanceFromDirective(vnode, binding)); // Initial update of trigger\n\n    handleUpdate(el, binding, vnode);\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode) {\n    removeClickListener(el); // Remove our $root listener\n\n    removeRootListeners(el, getInstanceFromDirective(vnode, binding)); // Reset custom props\n\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\n\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    removeAttr(el, ATTR_ARIA_EXPANDED);\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeAttr(el, ATTR_ROLE);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  }\n};","import { NAME_MODAL } from '../../constants/components';\nimport { EVENT_NAME_SHOW, EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { getAttr, hasAttr, isDisabled, matches, select, setAttr } from '../../utils/dom';\nimport { getRootActionEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { keys } from '../../utils/object';\nimport { getEventRoot } from '../../utils/get-event-root';\nimport { getInstanceFromDirective } from '../../utils/get-instance-from-directive'; // Emitted show event for modal\n\nvar ROOT_ACTION_EVENT_NAME_SHOW = getRootActionEventName(NAME_MODAL, EVENT_NAME_SHOW); // Prop name we use to store info on root element\n\nvar PROPERTY = '__bv_modal_directive__';\n\nvar getTarget = function getTarget(_ref) {\n  var _ref$modifiers = _ref.modifiers,\n      modifiers = _ref$modifiers === void 0 ? {} : _ref$modifiers,\n      arg = _ref.arg,\n      value = _ref.value;\n  // Try value, then arg, otherwise pick last modifier\n  return isString(value) ? value : isString(arg) ? arg : keys(modifiers).reverse()[0];\n};\n\nvar getTriggerElement = function getTriggerElement(el) {\n  // If root element is a dropdown-item or nav-item, we\n  // need to target the inner link or button instead\n  return el && matches(el, '.dropdown-menu > li, li.nav-item') ? select('a, button', el) || el : el;\n};\n\nvar setRole = function setRole(trigger) {\n  // Ensure accessibility on non button elements\n  if (trigger && trigger.tagName !== 'BUTTON') {\n    // Only set a role if the trigger element doesn't have one\n    if (!hasAttr(trigger, 'role')) {\n      setAttr(trigger, 'role', 'button');\n    } // Add a tabindex is not a button or link, and tabindex is not provided\n\n\n    if (trigger.tagName !== 'A' && !hasAttr(trigger, 'tabindex')) {\n      setAttr(trigger, 'tabindex', '0');\n    }\n  }\n};\n\nvar bind = function bind(el, binding, vnode) {\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target && trigger) {\n    var handler = function handler(event) {\n      // `currentTarget` is the element with the listener on it\n      var currentTarget = event.currentTarget;\n\n      if (!isDisabled(currentTarget)) {\n        var type = event.type;\n        var key = event.keyCode; // Open modal only if trigger is not disabled\n\n        if (type === 'click' || type === 'keydown' && (key === CODE_ENTER || key === CODE_SPACE)) {\n          getEventRoot(getInstanceFromDirective(vnode, binding)).$emit(ROOT_ACTION_EVENT_NAME_SHOW, target, currentTarget);\n        }\n      }\n    };\n\n    el[PROPERTY] = {\n      handler: handler,\n      target: target,\n      trigger: trigger\n    }; // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(trigger); // Listen for click events\n\n    eventOn(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (trigger.tagName !== 'BUTTON' && getAttr(trigger, 'role') === 'button') {\n      // If trigger isn't a button but has role button,\n      // we also listen for `keydown.space` && `keydown.enter`\n      eventOn(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar unbind = function unbind(el) {\n  var oldProp = el[PROPERTY] || {};\n  var trigger = oldProp.trigger;\n  var handler = oldProp.handler;\n\n  if (trigger && handler) {\n    eventOff(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  delete el[PROPERTY];\n};\n\nvar componentUpdated = function componentUpdated(el, binding, vnode) {\n  var oldProp = el[PROPERTY] || {};\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target !== oldProp.target || trigger !== oldProp.trigger) {\n    // We bind and rebind if the target or trigger changes\n    unbind(el, binding, vnode);\n    bind(el, binding, vnode);\n  } // If trigger element is not a button, ensure `role=\"button\"`\n  // is still set for accessibility\n\n\n  setRole(trigger);\n};\n\nvar updated = function updated() {};\n/*\n * Export our directive\n */\n\n\nexport var VBModal = {\n  inserted: componentUpdated,\n  updated: updated,\n  componentUpdated: componentUpdated,\n  unbind: unbind\n};","import { VBToggle } from './toggle';\nimport { pluginFactory } from '../../utils/plugins';\nvar VBTogglePlugin = /*#__PURE__*/pluginFactory({\n  directives: {\n    VBToggle: VBToggle\n  }\n});\nexport { VBTogglePlugin, VBToggle };","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { extend, mergeData } from '../../vue';\nimport { NAME_ICON_BASE } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { identity } from '../../utils/identity';\nimport { isUndefinedOrNull } from '../../utils/inspect';\nimport { mathMax } from '../../utils/math';\nimport { toFloat } from '../../utils/number';\nimport { makeProp } from '../../utils/props'; // --- Constants ---\n// Base attributes needed on all icons\n\nvar BASE_ATTRS = {\n  viewBox: '0 0 16 16',\n  width: '1em',\n  height: '1em',\n  focusable: 'false',\n  role: 'img',\n  'aria-label': 'icon'\n}; // Attributes that are nulled out when stacked\n\nvar STACKED_ATTRS = {\n  width: null,\n  height: null,\n  focusable: null,\n  role: null,\n  'aria-label': null\n}; // --- Props ---\n\nexport var props = {\n  animation: makeProp(PROP_TYPE_STRING),\n  content: makeProp(PROP_TYPE_STRING),\n  flipH: makeProp(PROP_TYPE_BOOLEAN, false),\n  flipV: makeProp(PROP_TYPE_BOOLEAN, false),\n  fontScale: makeProp(PROP_TYPE_NUMBER_STRING, 1),\n  rotate: makeProp(PROP_TYPE_NUMBER_STRING, 0),\n  scale: makeProp(PROP_TYPE_NUMBER_STRING, 1),\n  shiftH: makeProp(PROP_TYPE_NUMBER_STRING, 0),\n  shiftV: makeProp(PROP_TYPE_NUMBER_STRING, 0),\n  stacked: makeProp(PROP_TYPE_BOOLEAN, false),\n  title: makeProp(PROP_TYPE_STRING),\n  variant: makeProp(PROP_TYPE_STRING)\n}; // --- Main component ---\n// Shared private base component to reduce bundle/runtime size\n// @vue/component\n\nexport var BVIconBase = /*#__PURE__*/extend({\n  name: NAME_ICON_BASE,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var data = _ref.data,\n        props = _ref.props,\n        children = _ref.children;\n    var animation = props.animation,\n        content = props.content,\n        flipH = props.flipH,\n        flipV = props.flipV,\n        stacked = props.stacked,\n        title = props.title,\n        variant = props.variant;\n    var fontScale = mathMax(toFloat(props.fontScale, 1), 0) || 1;\n    var scale = mathMax(toFloat(props.scale, 1), 0) || 1;\n    var rotate = toFloat(props.rotate, 0);\n    var shiftH = toFloat(props.shiftH, 0);\n    var shiftV = toFloat(props.shiftV, 0); // Compute the transforms\n    // Note that order is important as SVG transforms are applied in order from\n    // left to right and we want flipping/scale to occur before rotation\n    // Note shifting is applied separately\n    // Assumes that the viewbox is `0 0 16 16` (`8 8` is the center)\n\n    var hasScale = flipH || flipV || scale !== 1;\n    var hasTransforms = hasScale || rotate;\n    var hasShift = shiftH || shiftV;\n    var hasContent = !isUndefinedOrNull(content);\n    var transforms = [hasTransforms ? 'translate(8 8)' : null, hasScale ? \"scale(\".concat((flipH ? -1 : 1) * scale, \" \").concat((flipV ? -1 : 1) * scale, \")\") : null, rotate ? \"rotate(\".concat(rotate, \")\") : null, hasTransforms ? 'translate(-8 -8)' : null].filter(identity); // We wrap the content in a `<g>` for handling the transforms (except shift)\n\n    var $inner = h('g', {\n      attrs: {\n        transform: transforms.join(' ') || null\n      },\n      domProps: hasContent ? {\n        innerHTML: content || ''\n      } : {}\n    }, children); // If needed, we wrap in an additional `<g>` in order to handle the shifting\n\n    if (hasShift) {\n      $inner = h('g', {\n        attrs: {\n          transform: \"translate(\".concat(16 * shiftH / 16, \" \").concat(-16 * shiftV / 16, \")\")\n        }\n      }, [$inner]);\n    } // Wrap in an additional `<g>` for proper animation handling if stacked\n\n\n    if (stacked) {\n      $inner = h('g', [$inner]);\n    }\n\n    var $title = title ? h('title', title) : null;\n    var $content = [$title, $inner].filter(identity);\n    return h('svg', mergeData({\n      staticClass: 'b-icon bi',\n      class: (_class = {}, _defineProperty(_class, \"text-\".concat(variant), variant), _defineProperty(_class, \"b-icon-animation-\".concat(animation), animation), _class),\n      attrs: BASE_ATTRS,\n      style: stacked ? {} : {\n        fontSize: fontScale === 1 ? null : \"\".concat(fontScale * 100, \"%\")\n      }\n    }, // Merge in user supplied data\n    data, // If icon is stacked, null-out some attrs\n    stacked ? {\n      attrs: STACKED_ATTRS\n    } : {}, // These cannot be overridden by users\n    {\n      attrs: {\n        xmlns: stacked ? null : 'http://www.w3.org/2000/svg',\n        fill: 'currentColor'\n      }\n    }), $content);\n  }\n});","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { extend, mergeData } from '../../vue';\nimport { omit } from '../../utils/object';\nimport { kebabCase, pascalCase, trim } from '../../utils/string';\nimport { BVIconBase, props as BVIconBaseProps } from './icon-base';\nvar iconProps = omit(BVIconBaseProps, ['content']);\n/**\n * Icon component generator function\n *\n * @param {string} icon name (minus the leading `BIcon`)\n * @param {string} raw `innerHTML` for SVG\n * @return {VueComponent}\n */\n\nexport var makeIcon = function makeIcon(name, content) {\n  // For performance reason we pre-compute some values, so that\n  // they are not computed on each render of the icon component\n  var kebabName = kebabCase(name);\n  var iconName = \"BIcon\".concat(pascalCase(name));\n  var iconNameClass = \"bi-\".concat(kebabName);\n  var iconTitle = kebabName.replace(/-/g, ' ');\n  var svgContent = trim(content || '');\n  return /*#__PURE__*/extend({\n    name: iconName,\n    functional: true,\n    props: iconProps,\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          props = _ref.props;\n      return h(BVIconBase, mergeData( // Defaults\n      {\n        props: {\n          title: iconTitle\n        },\n        attrs: {\n          'aria-label': iconTitle\n        }\n      }, // User data\n      data, // Required data\n      {\n        staticClass: iconNameClass,\n        props: _objectSpread(_objectSpread({}, props), {}, {\n          content: svgContent\n        })\n      }));\n    }\n  });\n};"],"sourceRoot":""}